@page "/"
@using ReadiFlip.UI.Components;
@using ReadiFlip.Reversi;
@using ReadiFlip.Generator;
@using Color = ReadiFlip.Reversi.Color;
@inject HttpClient Http

<div class="container">
    <Board BoardParam="@board" Player="@player" ShowMoves="true" Scores="scores" OnSquareClicked="@OnSquareClicked"/>

    @if (generator != null)
    {
        <div class="buttons">
            <FluentButton Appearance="Appearance.Accent" @onclick="GenerateNew">
                生成
            </FluentButton>
        </div>
    }

    @if (showAnswer && answer != null)
    {
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel Typo="Typography.Body">
                    @(isCorrect ? "\u2b55正解！" : "\u274c不正解:(")
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">
                    答え: @answer
                </FluentLabel>
                <FluentDataGrid Items="@candidates">
                    <PropertyColumn Property="@(x => x.Score)" Sortable="true" InitialSortDirection="SortDirection.Descending" Title="評価値"/>
                    <PropertyColumn Property="@(x => x.Move)" Sortable="false" Title="指し手"/>
                    <PropertyColumn Property="@(x => string.Join("", x.Pv))" Sortable="false" Title="読み筋"/>
                </FluentDataGrid>
            </FluentStack>
        </FluentCard>
    }

    @if(generator != null)
    {
        <FluentAccordion>
            <FluentAccordionItem Heading="生成パラメータ">
                <FluentEditForm Model="@GenParam">
                    <DataAnnotationsValidator />
                    <FluentValidationSummary />
                    <FluentStack Orientation="Orientation.Vertical">
                        <div>
                            <FluentNumberField Name="Delta1" @bind-Value="GenParam.D1" Label="許容誤差（1手読み）: 1手読みで互角っぽい手を列挙するのに使用します。" Required />
                            <FluentValidationMessage For="@(() => GenParam.D1)" />
                        </div>
                        <div>
                            <FluentNumberField Name="Delta2" @bind-Value="GenParam.D2" Label="許容誤差（3手読み）: 3手読み時に互角かそうでないかを判定するのに使用します。" Required />
                            <FluentValidationMessage For="@(() => GenParam.D2)" />
                        </div>
                        <div>
                            <FluentNumberField Name="MinPly" @bind-Value="GenParam.MinPly" Label="最小手数" Required />
                            <FluentValidationMessage For="@(() => GenParam.MinPly)" />
                        </div>
                        <div>
                            <FluentNumberField Name="MaxPly" @bind-Value="GenParam.MaxPly" Label="最大手数" Required />
                            <FluentValidationMessage For="@(() => GenParam.MaxPly)" />
                        </div>
                        <div>
                            <FluentNumberField Name="Trial" @bind-Value="GenParam.Trial" Label="生成ループ数" Required />
                            <FluentValidationMessage For="@(() => GenParam.Trial)" />
                        </div>
                    </FluentStack>
                </FluentEditForm>
            </FluentAccordionItem>
        </FluentAccordion>
        <div style="height: 30rem;">
        </div>
    }
</div>

@code {
    Color? player;
    ReadiFlip.Reversi.Board? board;
    Square? answer;
    IQueryable<SearchResult> candidates = new SearchResult[0].AsQueryable(); 
    bool showAnswer = false;
    bool isCorrect;
    Dictionary<Square, int>? scores = null;

    Generator? generator;

    [SupplyParameterFromForm]
    ReadiFlip.Generator.Parameter GenParam { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var stream = await Http.GetStreamAsync("data/eval.dat");
        // using var gzipStream = new System.IO.Compression.GZipStream(stream, System.IO.Compression.CompressionMode.Decompress);
        using var reader = new BinaryReader(stream); // very slow

        var eval = Edax.EdaxEval.ReadEval(reader); // Task.Run() しても別スレッドでは実行されないらしい
        #if DEBUG
    generator = new Generator(eval, 0);
        #else
        generator = new Generator(eval);
        #endif
    }

    void GenerateNew()
    {
        showAnswer = false;
        scores = null;
        var (board, color, bestMove, otherMoves) = generator!.Generate(GenParam);
        this.board = board;
        this.player = color;
        this.answer = bestMove.Move;
        this.candidates = otherMoves.AsQueryable();
    }

    void OnSquareClicked(Square sq)
    {
        if (!board?.IsValidMove(sq) ?? false) return;

        showAnswer = true;
        isCorrect = sq == answer;
        scores = candidates.ToDictionary(x => x.Move, x => x.Score);
    }
}